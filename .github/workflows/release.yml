name: Release

on:
  push:
    tags:
      - 'v*'

jobs:
  goreleaser:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      id-token: write
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.25'

      - name: Test build
        run: go build -o nos-test .

      - name: Clean up test files
        run: |
          rm -f nos-test
          rm -rf dist/
          git clean -fd
          git reset --hard HEAD

      - name: Check goreleaser config
        uses: goreleaser/goreleaser-action@v3
        with:
          version: v2.11.2
          args: check

      - name: Run Goreleaser
        uses: goreleaser/goreleaser-action@v3
        with:
          version: v2.11.2
          args: release --clean
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: List release artifacts
        run: |
          echo "=== Release artifacts created ==="
          if [ -d dist ]; then
            ls -la dist/
            echo ""
            echo "=== Release summary ==="
            echo "Tag: ${GITHUB_REF#refs/tags/}"
            echo "Artifacts:"
            find dist/ -name "*.tar.gz" -o -name "*.zip" | head -10
          else
            echo "No dist directory found"
          fi

  winget:
    runs-on: ubuntu-latest
    needs: goreleaser
    if: startsWith(github.ref, 'refs/tags/v')
    permissions:
      contents: write
      pull-requests: write
      actions: write
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          ref: main

      - name: Determine version
        id: version
        run: |
          TAG=${GITHUB_REF#refs/tags/}
          VERSION=${TAG#v}
          echo "TAG=$TAG" >> $GITHUB_ENV
          echo "VERSION=$VERSION" >> $GITHUB_ENV
          echo "version=$VERSION" >> $GITHUB_OUTPUT

      - name: Wait for release assets
        run: |
          TAG=${GITHUB_REF#refs/tags/}
          echo "Waiting for release assets to be available..."
          for i in {1..10}; do
            echo "Attempt $i: Checking for release assets..."
            assets=$(gh release view $TAG --repo ${{ github.repository }} --json assets --jq '.assets[].name' || echo "")
            if echo "$assets" | grep -q "windows_amd64.tar.gz\|windows_amd64.zip"; then
              echo "Windows assets found!"
              break
            fi
            echo "Assets not ready yet, waiting 30 seconds..."
            sleep 30
          done
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Get Windows release assets and extract executables
        id: assets
        run: |
          TAG=${GITHUB_REF#refs/tags/}
          REPO=${{ github.repository }}
          
          # Get release info
          release_info=$(gh release view $TAG --repo $REPO --json assets)
          
          # Find Windows assets
          FILE_X64=$(echo "$release_info" | jq -r '.assets[] | select(.name | contains("windows_amd64")) | .name' | head -1)
          FILE_ARM64=$(echo "$release_info" | jq -r '.assets[] | select(.name | contains("windows_arm64")) | .name' | head -1)
          
          if [ -z "$FILE_X64" ]; then
            echo "No Windows x64 asset found"
            exit 1
          fi
          
          # Download and extract Windows x64 executable
          echo "Downloading and extracting $FILE_X64..."
          gh release download $TAG --pattern "$FILE_X64" --repo $REPO
          tar -xzf "$FILE_X64"
          
          # Find the extracted .exe file
          if [ -f "nos.exe" ]; then
            EXE_X64="nos.exe"
          else
            EXE_X64=$(find . -name "nos.exe" | head -1)
            if [ -z "$EXE_X64" ]; then
              echo "Could not find nos.exe in extracted archive"
              exit 1
            fi
          fi
          
          # Copy and rename for upload
          cp "$EXE_X64" "nos-$VERSION-windows-amd64.exe"
          SHA_X64=$(sha256sum "nos-$VERSION-windows-amd64.exe" | awk '{print $1}')
          
          # Upload the standalone .exe file to the release
          gh release upload $TAG "nos-$VERSION-windows-amd64.exe" --repo $REPO
          
          # Set environment variables for manifest generation
          echo "FILE_X64=nos-$VERSION-windows-amd64.exe" >> $GITHUB_ENV
          echo "SHA_X64=$SHA_X64" >> $GITHUB_ENV
          echo "URL_X64=https://github.com/$REPO/releases/download/$TAG/nos-$VERSION-windows-amd64.exe" >> $GITHUB_ENV
          
          # Handle ARM64 if available
          if [ -n "$FILE_ARM64" ] && [ "$FILE_ARM64" != "null" ]; then
            echo "Downloading and extracting $FILE_ARM64..."
            gh release download $TAG --pattern "$FILE_ARM64" --repo $REPO
            tar -xzf "$FILE_ARM64"
            
            # Find the extracted ARM64 .exe file
            if [ -f "nos.exe" ]; then
              EXE_ARM64="nos.exe"
            else
              EXE_ARM64=$(find . -name "nos.exe" | head -1)
            fi
            if [ -n "$EXE_ARM64" ]; then
              cp "$EXE_ARM64" "nos-$VERSION-windows-arm64.exe"
              SHA_ARM64=$(sha256sum "nos-$VERSION-windows-arm64.exe" | awk '{print $1}')
              
              # Upload the standalone ARM64 .exe file
              gh release upload $TAG "nos-$VERSION-windows-arm64.exe" --repo $REPO
              
              echo "FILE_ARM64=nos-$VERSION-windows-arm64.exe" >> $GITHUB_ENV
              echo "SHA_ARM64=$SHA_ARM64" >> $GITHUB_ENV
              echo "URL_ARM64=https://github.com/$REPO/releases/download/$TAG/nos-$VERSION-windows-arm64.exe" >> $GITHUB_ENV
            else
              echo "Could not find ARM64 nos.exe in extracted archive"
              echo "FILE_ARM64=" >> $GITHUB_ENV
              echo "SHA_ARM64=" >> $GITHUB_ENV
              echo "URL_ARM64=" >> $GITHUB_ENV
            fi
          else
            echo "No Windows ARM64 asset found, skipping"
            echo "FILE_ARM64=" >> $GITHUB_ENV
            echo "SHA_ARM64=" >> $GITHUB_ENV
            echo "URL_ARM64=" >> $GITHUB_ENV
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Generate winget manifest
        run: |
          echo "Generating winget manifest for version $VERSION"
          echo "X64: $URL_X64 ($SHA_X64)"
          if [ -n "$URL_ARM64" ]; then
            echo "ARM64: $URL_ARM64 ($SHA_ARM64)"
            pwsh ./packaging/winget/generate-winget-manifest.ps1 -Version "$VERSION" -InstallerUrlX64 "$URL_X64" -Sha256X64 "$SHA_X64" -InstallerUrlArm64 "$URL_ARM64" -Sha256Arm64 "$SHA_ARM64"
          else
            echo "ARM64: Not available"
            pwsh ./packaging/winget/generate-winget-manifest.ps1 -Version "$VERSION" -InstallerUrlX64 "$URL_X64" -Sha256X64 "$SHA_X64"
          fi

      - name: Commit winget manifest directly to main
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
          
          # Add the generated manifest
          git add -f packaging/winget/PlebOne/nos/$VERSION/
          
          if git diff --staged --quiet; then
            echo "No changes to commit"
            exit 0
          fi
          
          git commit -m "feat: add winget manifest for version $VERSION

          🤖 Auto-generated winget manifest for nos v$VERSION

          📄 Files added:
          - packaging/winget/PlebOne/nos/$VERSION/manifest.yaml

          📦 Release assets:
          - Windows x64: $FILE_X64
          - Windows ARM64: ${FILE_ARM64:-'Not available'}

          🚀 Users can now install via:
          winget install PlebOne.nos"
          
          git push origin main
          
          echo "✅ Winget manifest committed directly to main branch!"
          echo "🎉 Release v$VERSION is now complete with winget support!"
          echo ""
          echo "📄 Manifest: packaging/winget/PlebOne/nos/$VERSION/manifest.yaml"
          echo "🚀 Install command: winget install PlebOne.nos"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Create release summary
        run: |
          echo "🎊 **Release v$VERSION Complete!**"
          echo ""
          echo "✅ **What was created:**"
          echo "- 🏗️ Multi-platform binaries (Linux, Windows, macOS)"
          echo "- 📦 GitHub release with assets"
          echo "- 🪟 Winget manifest for Windows users"
          echo ""
          echo "🚀 **Installation options:**"
          echo "- Download from: https://github.com/${{ github.repository }}/releases/tag/v$VERSION"
          echo "- Windows users: \`winget install PlebOne.nos\`"
